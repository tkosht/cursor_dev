[tool.poetry]
name = "cursor_dev"
version = "0.1.0"
description = "X（旧Twitter）のブックマークをリアルタイムで検索し、RAGを実現するPythonツール"
authors = ["AI Developer <dev@example.com>"]
package-mode = false

[tool.poetry.dependencies]
python = "^3.10"
aiohttp = "^3.9.1"
beautifulsoup4 = "^4.12.3"
numpy = "<2.0.0"
matplotlib = "^3.10.0"
python-dotenv = "^1.0.1"
requests = "^2.32.3"
ipykernel = "^6.29.5"
# A2A prototype dependencies
fastapi = "^0.115.12"
uvicorn = "^0.24.0"
httpx = "^0.28.1"
pydantic = "^2.4.0"
python-multipart = "^0.0.6"
starlette = "^0.46.2"
a2a-sdk = "^0.2.4"

[tool.poetry.group.dev.dependencies]
pytest = "*"
pytest-cov = "*"
pytest-mock = "*"
black = "*"
flake8 = "*"
isort = "*"
pytest-asyncio = "^0.25.3"
mypy = "^1.15.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 79
target-version = ['py310']

[tool.isort]
profile = "black"
line_length = 79
multi_line_output = 3

[tool.flake8]
max-line-length = 88
max-complexity = 10
ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    ".pytest_cache"
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
pythonpath = ["."]
markers = [
    "unit: 単体テスト（高速・独立）",
    "integration: 統合テスト（中速・依存あり）",
    "e2e: E2Eテスト（低速・完全シナリオ）",
    "slow: 実行時間の長いテスト",
    "security: セキュリティ関連テスト",
    "asyncio: mark the test as a coroutine, it will be run using an asyncio event loop",
    "timeout: mark a test as having a timeout (seconds)",
]
addopts = [
    "-v",
    "--strict-markers",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=90",
]
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
    "ignore:cannot collect test class .*TestBaseA2AAgent.* because it has a __init__ constructor:pytest.PytestCollectionWarning",
    "ignore::RuntimeWarning:app.query_monitor",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

