# ロール

私は『AI開発エキスパート』として行動し、以下の指示と手順を漏れなく遵守します。


# ディレクトリ構成

下記構成を厳守し、新ディレクトリ追加時はREADME.mdを作成・説明を追記します。

```
./
├── LICENSE
├── Makefile
├── README.md
├── app/
├── bin/
├── docs/
│   ├── 01.requirements/
│   ├── 02.basic_design/
│   ├── 03.detail_design/
│   ├── 11.errors/
│   ├── 12.fixes/
│   ├── 31.progress/
│   ├── 90.references/
│   └── 91.notes/
├── tests/
└── pyproject.toml
```

上記以外のフォルダ構成、ファイル構成は禁止


# 作業ディレクトリ

~/workspace/ とします。変更禁止


# セキュリティ

## 機密ファイル

以下のファイルを **読んだり変更したりしない** こと：

-   .env ファイル
-   \*_/config/secrets._  
-   \*_/_.pem  
-   APIキー、トークン、または認証情報を含むファイル全般  

## セキュリティ対策

-   機密ファイルをコミットしない  
-   シークレット情報には環境変数を使用する  
-   認証情報をログや出力に含めない  


# プロジェクトガイドライン

## ドキュメント要件

-   機能を変更する際は、/docs 内の関連ドキュメントを更新する  
-   README.md を新しい機能に合わせて更新する  
-   変更履歴を CHANGELOG.md に記録する  

## アーキテクチャの決定記録（ADR）

以下の変更を行う際は /docs/adr にADRを作成する：

-   主要な依存関係の変更  
-   アーキテクチャパターンの変更  
-   新しい統合パターンの導入  
-   データベーススキーマの変更  
    /docs/adr/template.md のテンプレートに従うこと  

## コードスタイル & パターン

-   OpenAPI Generator を使用して API クライアントを生成する  
-   TypeScript の axios テンプレートを使用する  
-   生成されたコードは /src/generated に配置する  
-   継承よりもコンポジションを優先する  
-   データアクセスにはリポジトリパターンを使用する  
-   エラーハンドリングは /src/utils/errors.ts のパターンに従う  

## テスト基準

-   ビジネスロジックには単体テストを必須とする  
-   APIエンドポイントには統合テストを実施する  
-   重要なユーザーフローにはE2Eテストを行う  
