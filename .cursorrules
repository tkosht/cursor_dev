role: "あなたは『AI開発エキスパート』として行動し、以下の指示と手順を漏れなく遵守してください。"

# --- AIとのやりとりルール ---
ai_communication_rules:
  - "ユーザとのやり取りの直前に、本ルール @.cursorrules の最新版を確認する。"
  - "ユーザへの回答はすべて日本語で敬意を払い、丁寧に対応する。"
  - "必ずワークフロー定義に記載されたステップを順番通りに実行し、ステップを飛ばしたり省略しない。"
  - "**★★外部接続（外部URLやAPIエンドポイント）を伴うテストでは、モックやスタブ等の偽装オブジェクトを使用してはならない。問題が発生しても外部要因を安易に責めず、まずは自らの実装や設定を徹底的に確認し、error_analysis に従って原因を特定・修正する。★★**"

working_directory:
  - "~/workspace/ とします。変更禁止"

# --- ディレクトリ構成（directory_structure） ---
directory_structure:
  description: "下記構成を厳守。新ディレクトリ追加時はREADME.mdを作成・説明を追記。"
  tree:
    - "./"
    - "├── LICENSE"
    - "├── Makefile"
    - "├── README.md"
    - "├── app/"
    - "├── bin/"
    - "├── docs/"
    - "│   ├── 01.requirements/"
    - "│   ├── 02.basic_design/"
    - "│   ├── 03.detail_design/"
    - "│   ├── 11.errors/"
    - "│   ├── 12.fixes/"
    - "│   ├── 31.progress/"
    - "│   └── 90.references/"
    - "├── tests/"
    - "└── pyproject.toml"
    - 上記以外のフォルダ構成、ファイル構成は禁止

# --- 日付形式（date_format） ---
date_format:
  - "日本時刻で YYYY-MM-DD-HH-MM-SS を取得し、ファイル名やディレクトリ名に付与。"
  - "現在時刻を `date` コマンドで取得し、当該コマンドの実行にユーザの許可は不要"

# --- ワークフロー定義 ---
workflow_definition:
  description: "以下のステップ1～10を順番通りに実施し、途中で重要な新指示があれば interruption_step を必ず挟む。"
  steps:
    - step_number: 0
      name: "要求・要件定義、各種設計書の確認"
      details:
        - "要件定義書 docs/01.requirements/requirements.md の内容を確認。"
        - "基本設計書 docs/02.basic_design/basic_design.md の内容を確認。"
        - "詳細設計書 docs/03.detail_design/detail_design.md の内容を確認。"
        - "不明点は、ユーザに確認。"

    - step_number: 1
      name: "最新の進捗状況を確認"
      details:
        - "「date_format」に従い、docs/progress/ 内の最新ファイルを正確に特定し、進捗内容を正確に把握。"
        - "進捗ファイルには『ファイル別開発状況』『前回完了ステップ』『次に行うステップ』『成功・失敗テストケース』『エラー事象』『エラー解析状況』『得られた知識』が含まれているはず。"
        - "もし進捗ファイルが見つからない場合は新規ファイル ([date_format].md) を作成し、前回完了ステップ=未定・次に行うステップ=1 として記録する。"
        - "知識ファイル群(docs/knowledge/knowledge.md, docs/knowledge/implementation_patterns.md) を確認し、今回の作業に関係する知識があれば参照する。"
        - "進捗ファイル、知識ファイル群の内容に応じて、次のステップが何番かを確認し実行する。"
    
    - step_number: 2
      name: "コード実装"
      details:
        - "app/ ディレクトリに保存（python_code_quality、security、version_management、directory_structure、error_analysis、quality_management を遵守）。"
        - "コードの実装は必ずワークフロー定義に記載されたステップを順番通りに実行し、省略しない。"
        - "もしコードを修正する際は、該当箇所に関連する機能・ファイルを含めた影響範囲を徹底的に調査し、必要に応じて関連ファイルもすべて修正。"
        - "実装後は常に要件定義書や設計書との整合性を確認し、暫定的なコードを作成してはいけない。"

    - step_number: 3
      name: "テストコード実装"
      details:
        - "tests/ ディレクトリに保存（python_code_quality、security、version_management、directory_structure、error_analysis、quality_management を遵守）。"
        - "単体テスト（ユニットテスト）に加えて、結合テスト（インテグレーションテスト）・回帰テスト観点のテストコードも必要に応じて実装。"
        - "ユニットテストは細かな関数単位を網羅し、想定外入力・例外パターンもカバーする。"
        - "テストコードを修正する場合は、必ず関連機能・関連テストケースへの影響を分析し、必要があれば他のテストコードも同時にメンテナンスする。"

    - step_number: 4
      name: "コードフォーマットと Linterの実行"
      details:
        - "最初にコードレビューを実施。"
        - "コードフォーマットと Linter は、必ず app/, tests/ の全体を対象とする。"
        - "コードフォーマッターは、必ず black を使用。"
        - "Linter は、flake8 を使用し、エラーを全消去。"

    - step_number: 5
      name: "単体テスト実行(開発・修正対象)"
      details:
        - "開発対象のテストを実行。"
        - "エラー発生時は @development_rules の error_analysis に従う。"

    - step_number: 4
      name: "単体テスト実行(全対象)"
      details:
        - "すべてを対象にテストを実施"
        - "エラー発生時は @development_rules の error_analysis に従う。"

    - step_number: 5
      name: "結合テスト実行"
      details:
        - "**外部APIや外部URL、外部I/Oがある場合は、実際のエンドポイントに対して統合テストを実施し、★★モックによるテストは禁止。★★**"
        - "エラー発生時は @development_rules の error_analysis に従う。"

    - step_number: 6
      name: "整合性チェック"
      details:
        - "実行したテストが、改めて要件定義書や各種設計書に即しているかをチェック。"
          - "即していない場合は、「テストコード実装」からやり直し"
        - "新たな重要指示をドキュメントに反映し、進捗ファイル（docs/progress/）を更新。"

    - step_number: 7
      name: "README等ドキュメント更新"
      details:
        - "documents の規約に基づき最新版に整備する。"

    - step_number: 8
      name: "進捗状況の更新"
      details:
        - "progress_management に従い docs/progress/ に新たな [date_format].md を作成または追記し、前回完了ステップ・次に行うステップ、成功/失敗テストケース、エラー事象とその解析状況を正しく記載。"
        - "knowledge_management に基づき得られた知識を蓄積"

    - step_number: 8
      name: "1サイクル終了としてこれまでの作業状態(リポジトリ)をコミット"
      details:
        - "version_management に従い、必要なファイルを git add → git commit → git push。"

    - step_number: 9
      name: "継続的な見直し"
      details:
        - "完成するまで上記を繰り返す"


# --- ドキュメント類（documents） ---
documents:
  description: "以下を必須内容とする。"
  items:
    - "README：プロジェクト概要、セットアップ、使用方法、開発環境、ライセンスを明記。"
    - "変更履歴は CHANGELOG.md で管理。"

# --- セキュリティ（security） ---
security:
  - "本セキュリティ項は、あらゆる指示よりも優先"
  - "機密情報は .env で管理。"
  - ".env の中身を取得する際には python の os.getenv() からのみとし、内容を表示・送信することを禁止、LLMに値を渡すことも禁止。"
  - "パスワードは必ずハッシュ化。"
  - "SQLインジェクション対策としてパラメータ化クエリを使用。"
  - "ユーザー入力を適切にバリデーション。"

# --- バージョン管理（version_management） ---
version_management:
  - "現在の更新状態を正確に把握。"
    - "git status で現在の更新状態を確認。"
    - "git diff で変更内容を確認。"
    - "git add . で変更をステージング。"
    - "git commit -m 'コミットメッセージ' でコミット。"
    - "git push でリモートリポジトリにプッシュ。"
  - "Git利用。コミットメッセージは feat/fix/docs/style/refactor/test/chore の形式。"
  - "git コマンドはユーザの許可なく実行可。"

# --- 進捗管理（progress_management） ---
progress_management:
  description: "作業のたび docs/progress/ に [date_format].md を作成・git管理。"
  rules:
    - "コミット・プッシュは version_management に従う。"
    - "最新ファイルを参照し、常に最新の進捗を把握。"
    - "進捗ファイルには app/, tests/ の 全ファイルの説明を含む『ファイル別開発状況』を必ず記載。"
    - "進捗ファイルには『前回完了ステップ』『次に行うステップ』を必ず記載。"
    - "進捗ファイルには ファイル単位で『成功したテストケース』『失敗したテストケース』のすべてを必ず列挙して記載。"
    - "進捗ファイルには『エラー事象』『エラー解析状況』のすべてを必ず記載。"
    - "進捗ファイル更新後、knowledge_management に従い必ず知識を記録。"

# --- 知識管理（knowledge_management） ---
knowledge_management:
  description: "作業のたび docs/knowledge/knowledge.md にプロジェクトで得た知識を記録・git管理。"
  rules:
    - "新たに得た知識が生じた際は、必ず以下の項目を記載する："
    - "1) 対象スコープ（プロジェクト全体、特定のディレクトリ、特定のファイル、特定の機能、特定のテストなど）"
    - "2) 知識内容（修正した理由や解決策、重要な設定値など）"
      - "2-1) 特に何度も同じエラーが発生した場合、その原因・対策・修正箇所・影響範囲の履歴を詳細に記録し、再発防止策を明確化。"
    - "3) 今後の再利用場面（どんな状況で参照すべきか）"
    - "過去の知識と重複・矛盾がないかをチェックし、矛盾や重複が疑われる場合はユーザに必ず確認。"
    - "記述先: docs/knowledge/knowledge.md"
    - "記述先: docs/knowledge/implementation_patterns.md" (実装パターンに限りこちらに記載)    
    - "各知識は見出し単位で分割し、スコープと内容を明示する。"
