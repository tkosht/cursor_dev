あなたは開発エキスパートで、以下に厳格に従って開発をしてください

- AIコミュニケーションルール
  - 内部処理は英語で構いませんが、ユーザとの会話は日本語とします
  - ユーザとの会話は、ユーザの立場になって会話してください

- 進捗管理
  - 現在の対応状況、今後の課題、等を マークダウンに記述し git commit のタイミングでアップデートしてください。
  - 逆に進捗を更新すべきタイミングの時は、マークダウンを更新し git commit してください。
  - 進捗情報は docs/progress/ ディレクトリに 新規にファイル(YYYY-MM-DD-HH-MM-SS.md)を作成して保存してください。

- Python コード品質
  - 基本規約
    - 基本的には Python 3.10～3.12 で開発します
    - flake8 に従います
    - lint の警告はすべて解消してください
    - DRY原則に従い、コードの重複よりも反復とモジュール化・クラス化を優先します
      - 必要に応じて、全ファイルを見直しリファクタリングを実行します
    - tests ディレクトリ配下にテストコードを配置します
    - テストコードは、pytest に従います
  - コーディング規約
    - 変数名・関数名は snake_case を使用します
    - クラス名は PascalCase を使用します
    - 定数は UPPER_SNAKE_CASE を使用します
    - プライベート変数・メソッドは先頭にアンダースコアを付けます
    - docstring は Google スタイルで記述します
    - 型ヒントを積極的に使用します
    - コメントは必要最小限にし、コードの意図が明確になるように記述します
    - 1行あたりの文字数は79文字以内とします
    - インデントは4スペースを使用します

- エラー解析
  - エラー発生時は、以下情報を docs/errors/ ディレクトリに 新規にファイル(YYYY-MM-DD-HH-MM-SS.md)を作成して保存してください。
    - 現在のディレクトリ構成
    - エラー情報
    - ログ情報
    - 現在の問題点
  - 上記内容（エラー情報、ログ情報、現在の問題点）を他のAIに原因分析と対策を考えるサポートを得るためのプロンプトを書いて、docs/fixes/ ディレクトリに エラーファイルと同じファイル名(YYYY-MM-DD-HH-MM-SS.md)を作成して保存してください。

- セキュリティ
  - 機密情報は環境変数で管理します
  - パスワードなどの機密情報はハッシュ化して保存します
  - SQLインジェクション対策としてパラメータ化クエリを使用します
  - ユーザー入力は適切にバリデーションを行います

- バージョン管理
  - Git を使用します
  - コミットメッセージは以下の形式で記述します：
    - feat: 新機能
    - fix: バグ修正
    - docs: ドキュメントのみの変更
    - style: コードの意味に影響を与えない変更
    - refactor: リファクタリング
    - test: テストコードの追加・修正
    - chore: ビルドプロセスやツールの変更
  - プルリクエストは必ずレビューを受けてからマージします

- ディレクトリ構成
  ./
  ├── LICENSE : ライセンスファイルです。基本的には、MIT とします
  ├── Makefile : Makefile です。適宜、アプリケーションの起動タスクなどを定義します
  ├── README.md : README です。アプリケーションの実装に合わせて適切に更新します
  ├── app/ : アプリケーションのコードを保存・配置します
  ├── bin/ : バッチのシェルスクリプト、Python ラッパー等を保存・配置します
  ├── docs/
  │   ├── 01.requirements/ : 要求・要件定義の文書群を保存・配置します
  │   ├── 02.basic_design/ : 基本設計・外部設計の文書群を保存・配置します
  │   ├── 03.detail_design/ : 詳細設計・内部設計の文書群を保存・配置します
  │   ├── 90.references/ : 参考資料を保存・配置します
  │   ├── errors/ : エラー情報を保存・配置します
  │   ├── fixes/ : エラー原因分析と対策を保存・配置します
  │   └── progress/ : 進捗情報を保存・配置します
  ├── tests/ : テストコードを保存・配置します
  └── pyproject.toml : poetry に必要なライブラリを定義します

  特に、新しくディレクトリを作成する場合は、README.md を作成して、そのディレクトリの説明を書きます

- 品質管理
  - ユニットテストのカバレッジは80%以上を目指します
  - CI/CDパイプラインでの自動テストを実施します
  - コードレビューは必ず実施します
  - 定期的に依存パッケージの更新を行います

- ドキュメント
  - READMEには最低限以下の内容を含めます
    - プロジェクトの概要
    - セットアップ手順
    - 使用方法
    - 開発環境の構築方法
    - ライセンス
  - API仕様書は OpenAPI (Swagger) で記述します
  - 変更履歴は CHANGELOG.md で管理します

