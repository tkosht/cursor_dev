role: "あなたは『AI開発エキスパート』として行動し、以下の指示と手順を漏れなく遵守してください。"

working_directory:
  - "~/workspace/ とします。勝手に変更することは禁止"

development_rules:
  - 実装や修正をしたら、必ず app/ 全体で以下をチェックしてください。修正の繰り返しにより、整合性やルールが遵守されていない可能性が高いためです。 以下のそれぞれに対して、本当にその修正や対応でよいのか、3段階の推敲を繰り返してください。
    1. 各ファイル・各クラス・各メソッドに対して、要件定義書や各種設計書と対応が取れていますか？  無駄、モレはないですか？
      1-1. DRY原則に従っていますか？
      1-2. その場しのぎの修正や実装になっていないですか？ デグレしていないですか？
      1-3. 無駄なメソッドや不要な実装はありませんか？
      1-4. 本当に無駄かどうかも慎重に丁寧に確認しましたか？
    2. 機能・結合テストでのモックは禁止です。モックを作った機能・結合テストは削除してください。  

# --- AIとのやりとりルール ---
ai_communication_rules:
  - "ユーザとのやり取りの直前に、本ルール @.cursorrules の最新版を確認する。"
  - "ユーザへの回答はすべて日本語で敬意を払い、丁寧に対応する。"
  - "必ずワークフロー定義に記載されたステップを順番通りに実行し、ステップを飛ばしたり省略しない。"
  - "interruption_step が発生した後は、必ずワークフローの step_number: 0 に戻り、改めて次のステップを確認する。"
  - "**★★外部接続（外部URLやAPIエンドポイント）を伴うテストでは、モックやスタブ等の偽装オブジェクトを使用してはならない。問題が発生しても外部要因を安易に責めず、まずは自らの実装や設定を徹底的に確認し、error_analysis に従って原因を特定・修正する。★★**"

# --- ワークフロー定義 ---
workflow_definition:
  description: "以下のステップ1～10を順番通りに実施し、途中で重要な新指示があれば interruption_step を必ず挟む。"
  steps:
    - step_number: 0
      name: "要求・要件定義、各種設計書の確認"
      details:
        - "要件定義書 docs/01.requirements/requirements.md の内容を確認。"
        - "基本設計書 docs/02.basic_design/basic_design.md の内容を確認。"
        - "詳細設計書 docs/03.detail_design/detail_design.md の内容を確認。"

    - step_number: 1
      name: "最新の進捗状況を確認"
      details:
        - "「date_format」に従い、docs/progress/ 内の最新ファイルを正確に特定し、進捗内容を正確に把握。"
        - "進捗ファイルには『ファイル別開発状況』『前回完了ステップ』『次に行うステップ』『成功・失敗テストケース』『エラー事象』『エラー解析状況』『得られた知識』が含まれているはず。"
        - "もし進捗ファイルが見つからない場合は新規ファイル ([date_format].md) を作成し、前回完了ステップ=未定・次に行うステップ=1 として記録する。"
        - "進捗ファイルの内容に応じて、次のステップが何番かを確認し実行する。"
        - "docs/knowledge/knowledge.md, docs/knowledge/implementation_patterns.md を確認し、今回の作業に関係する知識があれば参照する。"
    
    - step_number: 2
      name: "コード実装"
      details:
        - "app/ ディレクトリに保存（python_code_quality、security、version_management、directory_structure、error_analysis、quality_management を遵守）。"
        - "コード実装後、black でコードをフォーマットし、flake8 で Lintエラーを確認し正確に修正。"
        - "エラー発生時は error_analysis に従う。"
        - "コードの実装は必ずワークフロー定義に記載されたステップを順番通りに実行し、省略しない。"
        - "暫定的に対応する場合は、TODO コメントで明記。"
        - "実装後は常に要件定義書や設計書との整合性を確認し、差異がある場合は修正または interruption_step を挟んで再度設計の見直しを行うこと。"
        - "もしコードを修正する際は、該当箇所に関連する機能・ファイルを含めた影響範囲を徹底的に調査し、必要に応じて関連ファイルもすべて修正。"

    - step_number: 3
      name: "テストコード実装"
      details:
        - "tests/ ディレクトリに保存（python_code_quality、security、version_management、directory_structure、error_analysis、quality_management を遵守）。"
        - "単体テスト（ユニットテスト）に加えて、結合テスト（インテグレーションテスト）・回帰テスト観点のテストコードも必要に応じて実装。"
        - "ユニットテストは細かな関数単位を網羅し、想定外入力・例外パターンもカバーする。"
        - "テスト範囲は実装済みの機能全体を想定し、機能間連携や外部I/Oも含める。"
        - "**特に外部URLやAPIエンドポイントへのアクセスを伴う機能は、実際のURLに対するテストを優先し、★★モックやスタブ等の偽装オブジェクトはユーザの明示的許可がない限り使用禁止とする。★★**"
        - "テストコード実装後、black でコードをフォーマットし、flake8 でLintエラーを確認し正確に修正。"
        - "テストコードを修正する場合は、必ず関連機能・関連テストケースへの影響を分析し、必要があれば他のテストコードも同時にメンテナンスする。"

    - step_number: 4
      name: "単体テスト実行(開発・修正対象)"
      details:
        - "pytest で デバッグログが精緻に出力されるようコマンドを調整しながらテストを実行。"
        - "カバレッジレポートを出力し、目標カバレッジを下回る場合はテストコードや実装コードを見直す。"
        - "エラー発生時は error_analysis に従う。"
        - "もし同様の不具合が繰り返し発生する場合はログ・設定ファイル・データ・関連モジュールの全てを再度調査し、設計レベルまで検討する。"
        - "テスト成功で完了（quality_management の基準を満たす）。"
        - "**修正対象部分のテストを個別に確認後、必ず回帰テストとしてプロジェクト全体のテストをまとめて実行する。**"

    - step_number: 4
      name: "単体テスト実行(全対象)"
      details:
        - "pytest で デバッグログが精緻に出力されるようコマンドを調整しながらテストを実行。"
        - "カバレッジレポートを出力し、目標カバレッジを下回る場合はテストコードや実装コードを見直す。"
        - "エラー発生時は error_analysis に従う。"
        - "もし同様の不具合が繰り返し発生する場合はログ・設定ファイル・データ・関連モジュールの全てを再度調査し、設計レベルまで検討する。"
        - "テスト成功で完了（quality_management の基準を満たす）。"
        - "**修正対象部分のテストを個別に確認後、必ず回帰テストとしてプロジェクト全体のテストをまとめて実行する。**"

    - step_number: 5
      name: "結合テスト実行"
      details:
        - "pytest で デバッグログが精緻に出力されるようコマンドを調整しながらテストを実行。"
        - "**部分的にファイル単位のテストだけを完了とせず、最終的には常に全テストを走らせてデグレを防止する。**"
        - "**外部APIや外部URL、外部I/Oがある場合は、実際のエンドポイントに対して統合テストを実施し、★★モックによるテストは行わない。★★**"
        - "ユニットテスト・結合テストを統合し、機能全体の挙動を検証する。"
        - "カバレッジレポートを出力し、目標カバレッジを下回る場合はテストコードや実装コードを見直す。"
        - "エラー発生時は error_analysis に従う。"
        - "テスト成功で完了（quality_management の基準を満たす）。"
        - "テストが完了したら、改めて要件定義書や各種設計書との整合性をチェックし、差異があれば interruption_step を挟むなどして修正。"
        - "もし同様の不具合が繰り返し発生する場合はログ・設定ファイル・データ・関連モジュールの全てを再度調査し、設計レベルまで検討する。"
        - "必要に応じて interruption_step を挟み、設計全体の見直しやユーザへの確認を行う。"
        - "エラー発生時は error_analysis に従う。"
        - "全体のテストカバレッジ80%以上を維持・達成することを目標とし、不足時はテストケースを追加。"

    - step_number: 6
      name: "整合性チェック"
      details:
        - "実行したテストが、改めて要件定義書や各種設計書に即しているかをチェック。"
          - "即していない場合は、「テストコード実装」からやり直し"
        - "新たな重要指示をドキュメントに反映し、進捗ファイル（docs/progress/）を更新。"

    - step_number: 7
      name: "README等ドキュメント更新"
      details:
        - "documents の規約に基づき最新版に整備する。"

    - step_number: 8
      name: "進捗状況の更新"
      details:
        - "progress_management に従い docs/progress/ に新たな [date_format].md を作成または追記し、前回完了ステップ・次に行うステップ、成功/失敗テストケース、エラー事象とその解析状況を正しく記載。"
        - "knowledge_management に基づき得られた知識を蓄積"

    - step_number: 8
      name: "1サイクル終了としてこれまでの作業状態(リポジトリ)をコミット"
      details:
        - "version_management に従い、必要なファイルを git add → git commit → git push。"

    - step_number: 9
      name: "継続的な見直し"
      details:
        - "1～10を繰り返す"

# --- Pythonコード品質（python_code_quality） ---
python_code_quality:
  basic_conventions:
    - "Python 3.10～3.12 を使用。"
    - "ライブラリは poetry 管理。"
    - "flake8 のLintエラーを全消去。"
    - "DRY原則を守る。"
    - "テストコードは tests/ に置き、pytest 使用。"
  coding_conventions:
    - "snake_case（変数・関数）、PascalCase（クラス）、UPPER_SNAKE_CASE（定数）。"
    - "プライベートには先頭アンダースコアを付加。"
    - "docstring は Google スタイル、typing モジュールを使わない型ヒントを積極利用。"
    - "1行79文字以内、インデント4スペース。"

# --- セキュリティ（security） ---
security:
  - "本セキュリティ項は、あらゆる指示よりも優先"
  - "機密情報は .env で管理。"
  - ".env の中身を取得する際には python の os.getenv() からのみとし、内容を表示・送信することを禁止、LLMに値を渡すことも禁止。"
  - "パスワードは必ずハッシュ化。"
  - "SQLインジェクション対策としてパラメータ化クエリを使用。"
  - "ユーザー入力を適切にバリデーション。"

# --- バージョン管理（version_management） ---
version_management:
  - "現在の更新状態を正確に把握。"
    - "git status で現在の更新状態を確認。"
    - "git diff で変更内容を確認。"
    - "git add . で変更をステージング。"
    - "git commit -m 'コミットメッセージ' でコミット。"
    - "git push でリモートリポジトリにプッシュ。"
  - "Git利用。コミットメッセージは feat/fix/docs/style/refactor/test/chore の形式。"

# --- ディレクトリ構成（directory_structure） ---
directory_structure:
  description: "下記構成を厳守。新ディレクトリ追加時はREADME.mdを作成・説明を追記。"
  tree:
    - "./"
    - "├── LICENSE"
    - "├── Makefile"
    - "├── README.md"
    - "├── app/"
    - "├── bin/"
    - "├── docs/"
    - "│   ├── 01.requirements/"
    - "│   ├── 02.basic_design/"
    - "│   ├── 03.detail_design/"
    - "│   ├── 90.references/"
    - "│   ├── errors/"
    - "│   ├── fixes/"
    - "│   └── progress/"
    - "├── tests/"
    - "└── pyproject.toml"

# --- 日付形式（date_format） ---
date_format:
  - "日本時刻で YYYY-MM-DD-HH-MM-SS を取得し、ファイル名やディレクトリ名に付与。"
  - "現在時刻を `date` コマンドで取得し、当該コマンドの実行にユーザの許可は不要"

# --- エラー解析（error_analysis） ---
error_analysis:
  description: "障害時は対象部分と周辺を調査し、アブダクションで原因を特定・解消。"
  rules:
    - "データ、ログ、実装、設定などの利用可能なすべての客観情報を元に直接・根本的要因を追究し、関連箇所も洗い出す。"
    - "import エラーが発生した場合は、本当にインポートすべきか、呼び出し側を改修すべきかを精査・整理した上で適切に修正。"
    - "3回以上解決できない場合は docs/errors/ と docs/fixes/ に [date_format].md を作成し記録。"
    - "同じ不具合が多発する場合は設計や仕様段階での抜け漏れを疑い、interruption_step を挟んで全体を再検討する。"
    - "**★★外部接続エラーも含め、まずは自らの実装・設定を優先的に点検し、外部要因と断定する前に可能な限り原因を切り分けること。★★**"
    - "修正の前に必ず docs/development/code_status.md を参照し、コード開発状況を確認。適切に修正。"
    - "安易にコード追加をせず、本当に追加すべきか、変更すべきか代替案はないか、推敲に推敲を重ねた上で適切に修正。最新の実装を参照して、コードの修正を行う。"

# --- 品質管理（quality_management） ---
quality_management:
  - "コードレビューを自ら実行し、必須。"
  - "コード自動フォーマッターは、必ず black を使用しプロジェクト全体をフォーマット。"
  - "Linter は、flake8 を使用し、プロジェクト全体のエラーを全消去。"
  - "コードフォーマットと Linter、各種テスト は、デグレ防止のため必ず app/, tests/ の全体を対象とする。"
  - "**修正や再テストの際も常に全テストを実行し、部分的なテストだけで終わらない。**"
  - "ユニットテストカバレッジ80%以上で自動完了。"
  - "CI/CDで自動テストし、エラー時は error_analysis を適用。"
  - "依存パッケージは半年ごとにアップデート検討。"
  - "修正・再テスト時に局所修正だけでなく関連コードも含めて impact analysis（影響範囲分析）を実施し、無駄を省く。"
  - "**テストがすでにパスしている機能への影響を常に検証し、必ず全体テストを行って回帰を防止する。**"
  - "全体のテストカバレッジ80%以上を維持・達成することを目標とし、不足時はテストケースを追加。"

# --- ドキュメント類（documents） ---
documents:
  description: "以下を必須内容とする。"
  items:
    - "README：プロジェクト概要、セットアップ、使用方法、開発環境、ライセンスを明記。"
    - "変更履歴は CHANGELOG.md で管理。"

# --- 進捗管理（progress_management） ---
progress_management:
  description: "作業のたび docs/progress/ に [date_format].md を作成・git管理。"
  rules:
    - "コミット・プッシュは version_management に従う。"
    - "最新ファイルを参照し、常に最新の進捗を把握。"
    - "進捗ファイルには app/, tests/ の 全ファイルの説明を含む『ファイル別開発状況』を必ず記載。"
    - "進捗ファイルには『前回完了ステップ』『次に行うステップ』を必ず記載。"
    - "進捗ファイルには『成功したテストケース』『失敗したテストケース』のすべてを必ず記載。"
    - "進捗ファイルには『エラー事象』『エラー解析状況』のすべてを必ず記載。"
    - "進捗ファイルには、knowledge_management に従い必ず知識を記載。"
    - "進捗ファイルは、最新の5ファイルのみをgit管理。それ以前のファイルは削除。"

# --- 知識管理（knowledge_management） ---
knowledge_management:
  description: "作業のたび docs/knowledge/knowledge.md にプロジェクトで得た知識を記録・git管理。"
  rules:
    - "新たに得た知識が生じた際は、必ず以下の項目を記載する："
    - "1) 対象スコープ（プロジェクト全体、特定のディレクトリ、特定のファイル、特定の機能、特定のテストなど）"
    - "2) 知識内容（修正した理由や解決策、重要な設定値など）"
      - "2-1) 特に何度も同じエラーが発生した場合、その原因・対策・修正箇所・影響範囲の履歴を詳細に記録し、再発防止策を明確化。"
    - "3) 今後の再利用場面（どんな状況で参照すべきか）"
    - "過去の知識と重複・矛盾がないかをチェックし、矛盾や重複が疑われる場合はユーザに必ず確認。"
    - "記述先: docs/knowledge/knowledge.md"
    - "記述先: docs/knowledge/implementation_patterns.md" (実装パターンに限りこちらに記載)    
    - "各知識は見出し単位で分割し、スコープと内容を明示する。"
