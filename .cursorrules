role: "あなたは開発エキスパートで、以下に厳格に従って開発をしてください"

ai_communication_rules:
  - "内部処理は英語で構いませんが、ユーザとの会話は日本語とします"
  - "ユーザとの会話は、ユーザの立場になって会話してください"

workflow_definition:
  description: "ワークフローの定義"
  steps:
    - step_number: 1
      name: "要求・要件定義"
      details:
        - "1-1. 必要に応じて、参考資料を `urls.txt` のURLから読み込みます"

    - step_number: 2
      name: "基本設計・外部設計の文書群を保存・配置します"
      details:
        - "2-1. 「directory_structure」に従い、docs/01.requirements/ ディレクトリに保存してください"

    - step_number: 3
      name: "詳細設計・内部設計の文書群を保存・配置します"
      details:
        - "3-1. 「directory_structure」に従い、docs/02.basic_design/ ディレクトリに保存してください"

    - step_number: 4
      name: "コード実装を実行します"
      details:
        - "4-1. 「python_code_quality」、「security」、「version_management」、「directory_structure」、「error_analysis」、「quality_management」に従い、app/ ディレクトリに保存してください"
        - "4-2. エラーが発生した場合、下記の「error_analysis」に従い実行します"

    - step_number: 5
      name: "テストコード実装を実行します"
      details:
        - "5-1. 「python_code_quality」、「security」、「version_management」、「directory_structure」、「error_analysis」、「quality_management」に従い、tests/ ディレクトリに保存してください"
        - "5-2. エラーが発生した場合、下記の「error_analysis」に従い実行します"

    - step_number: 6
      name: "テスト実行を実行します"

    - step_number: 7
      name: "上記実装に正確に対応するREADME.md 等のドキュメントを「documents」に従い更新します"

    - step_number: 8
      name: "進捗状況を「progress_management」に従い更新します"

    - step_number: 9
      name: "ここまでを 1サイクルとして、ユーザに進捗を報告します。必要に応じてユーザの指示に従い、10. へ進みます"

    - step_number: 10
      name: "最新の進捗状況と要件定義内容を確認し、要件定義や基本設計、詳細設計の内容を見直し、必要に応じて更新します"
      details:
        - "10-1. つまり、1. ～ 10. を繰り返し実行し実行します"

python_code_quality:
  basic_conventions:
    - "基本的には Python 3.10～3.12 で開発します"
    - "flake8 に従います"
    - "lint の警告はすべて解消してください"
    - "DRY原則に従い、コードの重複よりも反復とモジュール化・クラス化を優先します"
    - "必要に応じて、全ファイルを見直しリファクタリングを実行します"
    - "tests ディレクトリ配下にテストコードを配置します"
    - "テストコードは、pytest に従います"
  coding_conventions:
    - "変数名・関数名は snake_case を使用します"
    - "クラス名は PascalCase を使用します"
    - "定数は UPPER_SNAKE_CASE を使用します"
    - "プライベート変数・メソッドは先頭にアンダースコアを付けます"
    - "docstring は Google スタイルで記述します"
    - "型ヒントを積極的に使用します"
    - "コメントは必要最小限にし、コードの意図が明確になるように記述します"
    - "1行あたりの文字数は79文字以内とします"
    - "インデントは4スペースを使用します"

security:
  - "機密情報は環境変数で管理します"
  - "パスワードなどの機密情報はハッシュ化して保存します"
  - "SQLインジェクション対策としてパラメータ化クエリを使用します"
  - "ユーザー入力は適切にバリデーションを行います"

version_management:
  - "Git を使用します"
  - "コミットメッセージは以下の形式で記述します："
    - "feat: 新機能"
    - "fix: バグ修正"
    - "docs: ドキュメントのみの変更"
    - "style: コードの意味に影響を与えない変更"
    - "refactor: リファクタリング"
    - "test: テストコードの追加・修正"
    - "chore: ビルドプロセスやツールの変更"
  - "プルリクエストは必ずレビューを受けてからマージします"

directory_structure:
  description: "ディレクトリ構成"
  tree:
    - "./"
    - "├── LICENSE : ライセンスファイルです。基本的には、MIT とします"
    - "├── Makefile : Makefile です。適宜、アプリケーションの起動タスクなどを定義します"
    - "├── README.md : README です。アプリケーションの実装に合わせて適切に更新します"
    - "├── app/ : アプリケーションのコードを保存・配置します"
    - "├── bin/ : バッチのシェルスクリプト、Python ラッパー等を保存・配置します"
    - "├── docs/"
    - "│   ├── 01.requirements/ : 要求・要件定義の文書群を保存・配置します"
    - "│   ├── 02.basic_design/ : 基本設計・外部設計の文書群を保存・配置します"
    - "│   ├── 03.detail_design/ : 詳細設計・内部設計の文書群を保存・配置します"
    - "│   ├── 90.references/ : 参考資料を保存・配置します"
    - "│   ├── errors/ : エラー情報を保存・配置します"
    - "│   ├── fixes/ : エラー原因分析と対策を保存・配置します"
    - "│   └── progress/ : 進捗情報を保存・配置します"
    - "├── tests/ : テストコードを保存・配置します"
    - "└── pyproject.toml : poetry に必要なライブラリを定義します"
  note: "特に新しくディレクトリを作成する場合は、README.md を作成して説明を書きます"

error_analysis:
  description: "エラー解析"
  rules:
    - "エラー内容を正確に把握します"
    - "直接的な要因と根源的な要因を分析し修正を試みます"
    - "エラー解析が困難な場合(3回以上試行しても解消しない場合)は、以下情報を docs/errors/ ディレクトリに新規ファイル(YYYY-MM-DD-HH-MM-SS.md)を作成して保存してください："
      - "現在のディレクトリ構成"
      - "エラー情報"
      - "ログ情報"
      - "現在の問題点"
    - "上記内容を他のAIに原因分析と対策を考えるサポートを得るためのプロンプトとして書き、docs/fixes/ ディレクトリにエラーファイルと同じファイル名(YYYY-MM-DD-HH-MM-SS.md)を作成して保存してください。"

quality_management:
  - "ユニットテストのカバレッジは80%以上を目指します"
    - "90% を超えている場合は、ユーザに承認をとることなく完了とします"
  - "CI/CDパイプラインでの自動テストを実施します"
    - "エラー発生時は、「エラー解析」に従い、エラー解析を実行してください"
    - "エラーが発生することなくテストが成功した時は、ユーザに承認をとることなく完了とします"
  - "コードレビューは必ず実施します"
  - "定期的に依存パッケージの更新を行います"
    - "前回の更新から半年以上経過している場合は、更新を行います"
    - "エラーが発生することなく更新が成功した時は、ユーザに承認をとることなく完了とします"
documents:
  description: "ドキュメント"
  items:
    - "READMEには最低限以下の内容を含めます："
      - "プロジェクトの概要"
      - "セットアップ手順"
      - "使用方法"
      - "開発環境の構築方法"
      - "ライセンス"
    - "API仕様書は OpenAPI (Swagger) で記述します"
    - "変更履歴は CHANGELOG.md で管理します"

progress_management:
  description: "進捗管理"
  rules:
    - "現在の対応状況、今後の課題等をマークダウンに記述し、git commit のタイミングでアップデートしてください。"
    - "進捗を更新すべきタイミングでは、マークダウンを更新し git commit してください。"
    - "進捗情報は docs/progress/ ディレクトリに新規ファイル(YYYY-MM-DD-HH-MM-SS.md)を作成して保存してください。"
