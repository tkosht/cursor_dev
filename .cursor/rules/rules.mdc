---
description: "ルール体系とMemory Bank構造の定義"
globs: 
alwaysApply: true
---
# ルール体系定義 (rules.mdc)

このファイルは、プロジェクト全体のルール体系、特に Memory Bank と `.cursorrules` (`*.mdc`) の構造と目的を定義します。

## 1. ルールファイルの階層と目的

`.cursorrules` (`*.mdc`) ファイルは、AI アシスタントがプロジェクトを理解し、一貫した方法で作業するための指示を提供します。以下の階層構造を基本とします。

1.  **`core.mdc` (必須):**
    *   **目的:** プロジェクトの種類や技術スタックに依存しない、普遍的な開発原則、ベストプラクティス、思考法、AI アシスタントとの基本的な対話ルール、およびワークフロー定義を含みます。
    *   **スコープ:** ソフトウェア開発全般に適用可能な汎用ルール・ワークフロー。
    *   **編集:** 汎用的なルールやワークフローが確立・発見された場合に更新します。

2.  **`project.mdc` (必須):**
    *   **目的:** 特定のプロジェクトに固有のルール、設定、技術選択、運用手順などを定義します。`core.mdc` のルールを前提とし、それを具体化・上書き・補足します。
    *   **スコープ:** 現在のプロジェクトにのみ適用されるルール。
    *   **編集:** プロジェクト固有の決定事項、環境設定、依存関係、運用ルールなどが変更・追加された場合に更新します。

3.  **`rules.mdc` (必須):**
    *   **目的:** ルール体系全体の構造と目的、Memory Bank との関係、編集ワークフローなどのメタ情報を定義します。
    *   **スコープ:** ルールファイル群の管理・運用ルール。
    *   **編集:** ルール体系の構造や運用方法が変更された場合に更新します。

4.  **その他の `.mdc` ファイル (特別な理由がある場合のみ):**
    *   **原則:** 上記3つのファイルで十分なルール管理を目指します。
    *   **例外条件:** 特定の技術領域や側面について、分離することが保守性向上に明確に寄与し、かつチーム内で合意が得られた場合に限り、追加ファイル作成を検討できます。
    *   **承認プロセス:** 新規 `.mdc` ファイル作成時は、その必要性と構造への影響を明確にした上で、チーム承認を得る必要があります。

### 1.4 ルールファイルの依存関係図

```mermaid
graph LR
    subgraph ".cursor/rules/"
        RulesMDC["rules.mdc (ルール体系の定義)"]
        CoreMDC["core.mdc (汎用ルール・ワークフロー)"]
        ProjectMDC["project.mdc (プロジェクト固有ルール)"]

        RulesMDC --> CoreMDC
        RulesMDC --> ProjectMDC
        CoreMDC --> ProjectMDC
    end

    classDef mdc fill:#eee,stroke:#333,stroke-width:2px;
    class RulesMDC,CoreMDC,ProjectMDC mdc
```

**依存関係の説明:**
- `rules.mdc` は、ルール体系全体の定義として他のすべてのルールファイルの基盤となります
- `core.mdc` は、普遍的なルールとワークフローを定義し、プロジェクト固有ルールの基盤となります  
- `project.mdc` は、`core.mdc` のルールを前提として、プロジェクト固有の詳細を定義します

## 2. Memory Bank 構造 (`/memory-bank/*.md`)

Memory Bank は、AI アシスタントがプロジェクトのコンテキストを理解し、作業を引き継ぐための知識ベースです。以下のコアファイルを含みます。

```mermaid
flowchart TD
    PB[projectbrief.md] --> PC[productContext.md]
    PB --> SP[systemPatterns.md]
    PB --> TC[techContext.md]

    PC --> AC[activeContext.md]
    SP --> AC
    TC --> AC

    AC --> P[progress.md]
```

### コアファイル (必須)

1.  `projectbrief.md`: プロジェクトの根本的な目的、目標、スコープ。
2.  `productContext.md`: プロジェクトが存在する理由、解決する問題、ユーザー体験。
3.  `systemPatterns.md`: システムアーキテクチャ、主要な技術決定、デザインパターン。
4.  `techContext.md`: 使用技術、開発セットアップ、技術的制約、依存関係。
5.  `activeContext.md`: 現在の作業焦点、最近の変更、次のステップ、アクティブな決定事項。
6.  `progress.md`: 実装済みの機能、残りのタスク、現在の状態、既知の問題。

### 追加コンテキスト

必要に応じて `/memory-bank/` 内にサブディレクトリや追加の `.md` ファイルを作成し、複雑な機能、API仕様、テスト戦略などを文書化します。

## 3. `.mdc` ファイルの編集ワークフロー

*(ここに、ユーザー指定の `.md` 経由での編集ワークフローを記述)*
*(例: "`.mdc` ファイルを更新する際は、まず対応する `/docs/rules_drafts/` 内の `.md` ファイルを編集し、レビュー後に `make update-rules` コマンドを実行して `.mdc` に反映させる。"など)*

*(現時点ではワークフロー不明のためプレースホルダ)* 
