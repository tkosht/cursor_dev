---
description: ワークフローの定義
globs: *
alwaysApply: true
---

# ワークフロー

## 前提

以下の内容に従う

- [project.mdc](mdc:.cursor/rules/project.mdc)
- [python.mdc](mdc:.cursor/rules/python.mdc)


## 開発ワークフローの定義

### 1. ルール読み込み（必須）
1. コアルール読み込み
    - .cursor/rules/*.mdc をすべて読み込む

2. 詳細ルール読み込み
    - memory-bank/*.md を関連するものすべて読み込む
    - 特に以下は必須：
        - documentation_strategy.md
        - test_strategy.md
        - error_analysis.md
        - design_principles.md
        - rules.md

3. 実装ルール読み込み
    - docs/*/*.md から関連するものを読み込む
    - 特に以下は重要：
        - requirements.md
        - basic_design.md
        - detail_design.md


### 2. 現状ステータスの確認とタスク実行

- ドキュメントを読み込む (無ければスキップ)
    - [requirements.md](mdc:docs/01.requirements/requirements.md)
    - [basic_design.md](mdc:docs/02.basic_design/basic_design.md)
    - [detail_design.md](mdc:docs/03.detail_design/detail_design.md)
- 現状ステータスの確認
    - memory-bank/ の最新情報を確認 ([activeContext.md](mdc:memory-bank/activeContext.md), [progress.md](mdc:memory-bank/progress.md) を含む)
- 目的・ゴールステータスの確認
    - 目的を改めて明示的に確認 ([projectbrief.md](mdc:memory-bank/projectbrief.md) 参照)
- タスク計画
    - 次に実行すべきタスクを計画
- タスク実行
    - 計画したタスクを実行 ([development.mdc](mdc:.cursor/rules/development.mdc) の工程に従う)
- タスクのコミット
    - 実行したタスクに関して、git commit & push
- 現状ステータスの更新
    - memory-bank/ に最新の状態を更新 ([activeContext.md](mdc:memory-bank/activeContext.md), [progress.md](mdc:memory-bank/progress.md) を含む)
- memory-bank/ の内容をコミット
    - 実行したタスクに関して、git commit & push


## キャンセル発生時のワークフロー

ユーザがキャンセルした場合は、もう一度実行するか、次の処理・タスクを実行すべきかユーザの判断を仰ぐ


## 変更内容の確認

- 自分の記憶・コンテキストに頼ることなく、必ず `git status | cat` および `git diff | cat` で 客観的に変更内容を漏れなく確認
- 変更内容をコミットするために、 `git add .` ですべての非ステージング対象をステージングすること
    - ステージングすべきでないファイルがある場合は、ユーザの判断を仰ぐ
