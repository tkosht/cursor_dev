---
description: 
globs: 
alwaysApply: true
---
# プロジェクト固有ルール

このファイルは、本プロジェクト特有の環境設定、技術スタック、ディレクトリ構成、Python開発ルール、セキュリティガイドラインなどを定義します。
`core.md` に定義された普遍的なルールを前提とし、それを補完・具体化します。

## 1. 開発環境

### 1.1 VSCode Dev Container環境
- すでにVSCode Dev Container内で作業中
- コンテナ設定は .devcontainer で管理
- 新規Dockerfile作成は禁止（Dev Container使用のため）
- 作業ディレクトリ: ~/workspace

### 1.2 コンテナ環境詳細
- ベースイメージ: python:3.12-slim （詳細は [memory-bank/06-project/context/tech_context.md](mdc:memory-bank/06-project/context/tech_context.md) 参照）
- 公開ポート: 7860（Gradio用）（詳細は [memory-bank/06-project/context/tech_context.md](mdc:memory-bank/06-project/context/tech_context.md) 参照）
- Git操作はコンテナ内で実施
- 環境変数は.devcontainer経由で管理（詳細は [memory-bank/06-project/context/tech_context.md](mdc:memory-bank/06-project/context/tech_context.md) 参照）

## 2. Python 開発ルール (本プロジェクト固有)

### 2.1 Python環境
- Pythonバージョン: 3.10～3.12
    - Python 3.10～3.12 を使用する
    - 実装も、3.10以上を前提とする
        - 3.9等下位バージョンへの互換性考慮は不要
- 依存パッケージ管理: Poetry ([poetry.lock](mdc:poetry.lock), [pyproject.toml](mdc:pyproject.toml))
    - `poetry add <package>` で追加
    - `poetry install` で環境構築
    - 依存関係は極力具体的にバージョン指定

### 2.2 プロジェクト名
- `pyproject.toml` 内の `name` は `cursor_dev` とする。

## 3. ディレクトリ構成 (抜粋・主要部分)

```
./
├── .cursor/            # Cursor AI 設定
│   └── rules/          # ルールファイル (*.md)
├── .devcontainer/      # Dev Container 設定
├── .ssh/               # SSH 設定
├── .specstory/         # Cursor上の会話履歴
├── .vscode/            # VSCode 設定
├── app/                # ソースコード (Pythonパッケージ)
│   └── xxx/            # Pythonパッケージ名/カテゴリ名
│       ├── __init__.py
│       └── ... (機能ごとのモジュール)
├── bin/                # 実行ファイル、スクリプト
├── docker/             # Dockerfile群
├── docs/               # ドキュメント (設計書、要件定義書など)
│   ├── 01.requirements/
│   ├── 02.basic_design/
│   └── 03.detail_design/
├── memory-bank/        # AIの記憶領域 (プロジェクトコンテキスト)
├── tests/              # テストコード
├── .cursor*            # Cursor IDE 設定
├── .dockerignore       # Docker ignore ファイル
├── .env*               # 環境設定
├── compose.yml         # Docker Compose ファイル(リンク)
├── cursor_dev.code-workspace      # ワークスペース設定ファイル
├── pyproject.toml      # Poetry 設定ファイル
├── LICENSE             # ライセンスファイル
└── README.md
```

- 詳細: [memory-bank/03-patterns/operational_patterns.md](mdc:memory-bank/03-patterns/operational_patterns.md) も参照。

## 4. コーディング規約

- **フォーマッタ:** Black（当面維持。将来 Ruff formatter への統合を評価）
  - コミット前に `black .` を実行
- **リンター:** Ruff を標準採用（Flake8 は互換・補助に限定）
  - `ruff check .` を実行
- **型チェック:** MyPy（設定は [pyproject.toml](mdc:pyproject.toml) の `[tool.mypy]` セクション参照）
  - `mypy app` を基本ターゲットとする（相対パス原則）
- **命名規則:**
  - 変数・関数: スネークケース (`variable_name`, `function_name`)
  - クラス: パスカルケース (`ClassName`)
  - モジュール: スネークケース (`module_name.py`)
  - 定数: アッパーケーススネーク (`CONSTANT_NAME`)
- コメント: Docstring は Google スタイルを推奨

## 5. Git とバージョン管理

### 5.1 コミットメッセージ規約
- Conventional Commits 形式を推奨 (例: `feat: 新機能の追加`, `fix: バグ修正`, `docs: ドキュメント更新`)
- 詳細は [memory-bank/04-quality/commit_quality_rules.md](mdc:memory-bank/04-quality/commit_quality_rules.md) 参照

### 5.2 ブランチ戦略
- `main` (または `master`): 本番リリース用。直接コミット禁止。
- `develop`: 開発用メインブランチ。ここからフィーチャーブランチを切る。
- `feature/<issue_id>-<description>`: 機能開発用ブランチ。
- `fix/<issue_id>-<description>`: バグ修正用ブランチ。
- Pull Request ベースで `develop` へマージ。

### 5.3 git push --force の禁止
- 原則として `git push --force` および `git push --force-with-lease` は使用しない。
- どうしても必要な場合は、影響範囲を最小限にし、チームに連絡・確認の上で実行する。

## 6. セキュリティ

### 6.1 機密情報の扱い
- **`CLAUDE.md` の遵守:** セキュリティに関する全ての行動は [CLAUDE.md SECURITY ABSOLUTE](mdc:CLAUDE.md#SECURITY-ABSOLUTE-(セキュリティ絶対)) の指示に従うこと。
- APIキー、パスワード等の機密情報はコードに直接記述しない。
- 環境変数や `.env` ファイル (Git管理外) を使用する。
- `.env` ファイルは `.gitignore` に追加する。

### 6.2 依存関係の脆弱性
- 定期的に `poetry show --outdated` やセキュリティスキャンツール (例: Snyk, Trivy) で依存関係の脆弱性を確認する。

### 6.3 入力値の検証
- ユーザー入力や外部からのデータは必ずバリデーションとサニタイズを行う。

### 6.4 エラーメッセージ
- 詳細なエラー情報をユーザーに表示しない（ログには記録）。

### 6.5 外部ライブラリの選定
- 信頼性、メンテナンス状況、セキュリティ脆弱性の有無を確認する。

### 6.6 git リポジトリの公開範囲
- 本リポジトリは機密情報を含まない前提で、公開範囲は開発チーム内とする。 (もし public ならその旨を記載し、機密情報混入により一層注意)

## 7. パス・設定の原則

- 相対パス原則: コマンド・設定・スクリプトは相対パスで記述する。絶対パスは明示許可がない限り禁止。
- 可変値のハードコード禁止: パス/閾値/キー/エンドポイントなどは設定ファイル・環境変数・引数で外出しする。

## 8. プロジェクト固有ツール・戦略と `CLAUDE.md` との連携

### 7.1 Cognee 関連
- **目的:** プロジェクトの知識ベースの管理と検索性向上。
- **`CLAUDE.md` との連携:** Cogneeの利用戦略やマイグレーション手順は、[CLAUDE.md](mdc:CLAUDE.md) の `KNOWLEDGE ACCESS PRINCIPLES` を具現化する手段として位置づけられる。
- **関連ドキュメント:** [memory-bank/01-cognee/](mdc:memory-bank/01-cognee)

### 7.2 Competitive Organization 関連
- **目的:** 複数のAIエージェントによる階層的・協調的なタスク実行フレームワーク。
- **`CLAUDE.md` との連携:** この組織フレームワークは、[CLAUDE.md](mdc:CLAUDE.md) の `MINDSET` および `VALUE ASSESSMENT` に基づく高度な意思決定を自動化・スケールさせるための具体的な実装パターンである。
- **関連ドキュメント:** [memory-bank/02-organization/](mdc:memory-bank/02-organization)

### 8.3 品質・テスト戦略
- **目的:** 高品質なソフトウェア開発の維持。
- **`CLAUDE.md` との連携:** テスト駆動開発(TDD)や品質ゲート (`quality_gate_check.py`) の運用は、[CLAUDE.md](mdc:CLAUDE.md) の `TDD-MANDATORY` や `QUALITY COMMITMENT` の原則を遵守するための必須プラクティスである。
- **関連ドキュメント:** [memory-bank/04-quality/](mdc:memory-bank/04-quality), [memory-bank/00-core/tdd_implementation_knowledge.md](mdc:memory-bank/00-core/tdd_implementation_knowledge.md)
### 8.4 Git Worktree 並列開発
- **目的:** 複数タスクの並行開発による効率化。
- **`CLAUDE.md` との連携:** Git Worktreeの利用は、@CLAUDE.md が要求する迅速な価値提供と、安全な開発環境の分離を両立させるための技術的手段である。
- **関連ドキュメント:** @memory-bank/08-automatio[n/git_work](mdc:CLAUDE.md)tree_parallel_development.md 
