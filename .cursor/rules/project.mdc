---
description: 
globs: 
alwaysApply: true
---
# プロジェクト固有ルール

このファイルは、本プロジェクト特有の環境設定、技術スタック、ディレクトリ構成、Python開発ルール、セキュリティガイドラインなどを定義します。
`core.mdc` に定義された普遍的なルールを前提とし、それを補完・具体化します。

## 1. 開発環境

### 1.1 VSCode Dev Container環境
- すでにVSCode Dev Container内で作業中
- コンテナ設定は .devcontainer で管理
- 新規Dockerfile作成は禁止（Dev Container使用のため）
- 作業ディレクトリ: ~/workspace

### 1.2 コンテナ環境詳細
- ベースイメージ: python:3.12-slim （詳細は [techContext.md](mdc:memory-bank/techContext.md) 参照）
- 公開ポート: 7860（Gradio用）（詳細は [techContext.md](mdc:memory-bank/techContext.md) 参照）
- Git操作はコンテナ内で実施
- 環境変数は.devcontainer経由で管理（詳細は [techContext.md](mdc:memory-bank/techContext.md) 参照）

## 2. Python 開発ルール (本プロジェクト固有)

### 2.1 Python環境
- Pythonバージョン: 3.10～3.12
    - Python 3.10～3.12 を使用する
    - 実装も、3.10以上を前提とする
        - 3.9等下位バージョンへの互換性考慮は不要
- 依存パッケージ管理: Poetry ([poetry.lock](mdc:poetry.lock), [pyproject.toml](mdc:pyproject.toml))
    - `poetry add <package>` で追加
    - `poetry install` で環境構築
    - 依存関係は極力具体的にバージョン指定

### 2.2 プロジェクト名
- `pyproject.toml` 内の `name` は `cursor_dev` とする。

## 3. ディレクトリ構成 (抜粋・主要部分)

```
./
├── .cursor/            # Cursor AI 設定
│   └── rules/          # ルールファイル (*.mdc)
├── .devcontainer/      # Dev Container 設定
├── .ssh/               # SSH 設定
├── .specstory/         # Cursor上の会話履歴
├── .vscode/            # VSCode 設定
├── app/                # ソースコード (Pythonパッケージ)
│   └── xxx/            # Pythonパッケージ名/カテゴリ名
│       ├── __init__.py
│       └── ... (機能ごとのモジュール)
├── bin/                # 実行ファイル、スクリプト
├── docker/             # Dockerfile群
├── docs/               # ドキュメント (設計書、要件定義書など)
│   ├── 01.requirements/
│   ├── 02.basic_design/
│   └── 03.detail_design/
├── memory-bank/        # AIの記憶領域 (プロジェクトコンテキスト)
├── tests/              # テストコード
├── .cursor*            # Cursor IDE 設定
├── .dockerignore       # Docker ignore ファイル
├── .env*               # 環境設定
├── compose.yml         # Docker Compose ファイル(リンク)
├── cursor_dev.code-workspace      # ワークスペース設定ファイル
├── pyproject.toml      # Poetry 設定ファイル
├── LICENSE             # ライセンスファイル
└── README.md
```

- 詳細: [systemPatterns.md](mdc:memory-bank/systemPatterns.md) も参照。

## 4. コーディング規約

- **フォーマッタ:** Black (設定は [pyproject.toml](mdc:pyproject.toml) の `[tool.black]` セクション参照)
  - コミット前に `black .` を実行
- **リンター:** Flake8 (設定は [.flake8](mdc:.flake8) 参照)
  - `flake8 .` で警告ゼロを目指す
- **型チェック:** MyPy (設定は [pyproject.toml](mdc:pyproject.toml) の `[tool.mypy]` セクション参照)
  - `mypy src` でエラーゼロを目指す
- **命名規則:**
  - 変数・関数: スネークケース (`variable_name`, `function_name`)
  - クラス: パスカルケース (`ClassName`)
  - モジュール: スネークケース (`module_name.py`)
  - 定数: アッパーケーススネーク (`CONSTANT_NAME`)
- コメント: Docstring は Google スタイルを推奨

## 5. Git とバージョン管理

### 5.1 コミットメッセージ規約
- Conventional Commits 形式を推奨 (例: `feat: 新機能の追加`, `fix: バグ修正`, `docs: ドキュメント更新`)
- 詳細は [commit_guideline.md](mdc:docs/development_rules/commit_guideline.md) 参照 (存在する場合)

### 5.2 ブランチ戦略
- `main` (または `master`): 本番リリース用。直接コミット禁止。
- `develop`: 開発用メインブランチ。ここからフィーチャーブランチを切る。
- `feature/<issue_id>-<description>`: 機能開発用ブランチ。
- `fix/<issue_id>-<description>`: バグ修正用ブランチ。
- Pull Request ベースで `develop` へマージ。

### 5.3 git push --force の禁止
- 原則として `git push --force` および `git push --force-with-lease` は使用しない。
- どうしても必要な場合は、影響範囲を最小限にし、チームに連絡・確認の上で実行する。

## 6. セキュリティ

### 6.1 機密情報の扱い
- APIキー、パスワード等の機密情報はコードに直接記述しない。
- 環境変数や `.env` ファイル (Git管理外) を使用する。
- `.env` ファイルは `.gitignore` に追加する。

### 6.2 依存関係の脆弱性
- 定期的に `poetry show --outdated` やセキュリティスキャンツール (例: Snyk, Trivy) で依存関係の脆弱性を確認する。

### 6.3 入力値の検証
- ユーザー入力や外部からのデータは必ずバリデーションとサニタイズを行う。

### 6.4 エラーメッセージ
- 詳細なエラー情報をユーザーに表示しない（ログには記録）。

### 6.5 外部ライブラリの選定
- 信頼性、メンテナンス状況、セキュリティ脆弱性の有無を確認する。

### 6.6 git リポジトリの公開範囲
- 本リポジトリは機密情報を含まない前提で、公開範囲は開発チーム内とする。 (もし public ならその旨を記載し、機密情報混入により一層注意)

## 7. その他

- 既存コードのスタイルやパターンを尊重する。
- 不明な点は自己判断せず、チームに確認する。
